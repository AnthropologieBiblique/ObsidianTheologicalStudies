/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LinkHeadingRange
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  dividerP2H: " > ",
  dividerH2H: " > "
};
var LinkHeadingRange = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new LinkHeadingRangeSettingTab(this.app, this));
    let postProc;
    postProc = (el, ctx) => {
      const linkElements = el.querySelectorAll("a.internal-link");
      const wikiLinkRegex = /([^#\]|[]*)#?([^#\]|[]*)?#?([^|\][]*)?/;
      for (let i = 0; i < linkElements.length; i++) {
        const linkAsHTML = linkElements[i].getAttribute("data-href");
        const matches = wikiLinkRegex.exec(linkAsHTML);
        if (matches[2] == void 0) {
          continue;
        }
        const page = matches[1];
        const headingA = matches[2];
        const headingB = matches[3];
        const dividerP2H = this.settings.dividerP2H;
        const dividerH2H = this.settings.dividerH2H;
        let innerText = "";
        let href = "";
        let standardInnerText = "";
        standardInnerText = standardInnerText.concat(page, " > ", headingA);
        if (headingB == void 0) {
          if (linkElements[i].innerText == standardInnerText) {
            innerText = innerText.concat(page, dividerP2H, headingA);
            linkElements[i].innerText = innerText;
          }
          continue;
        }
        const line = this.app.metadataCache.getFileCache(this.app.vault.getMarkdownFiles().filter((file) => file.basename == matches[1])[0])["headings"].filter((heading) => heading.heading == matches[2])[0].position.end.line;
        innerText = "";
        href = "";
        linkElements[i].href = href.concat(page, "#", headingA);
        linkElements[i].className = "heading-range-link";
        linkElements[i].setAttribute("linktext", page);
        linkElements[i].setAttribute("scrollline", line);
        standardInnerText = "";
        standardInnerText = standardInnerText.concat(page, " > ", headingA, " > ", headingB);
        if (linkElements[i].innerText == standardInnerText) {
          innerText = innerText.concat(page, dividerP2H, headingA, dividerH2H, headingB);
          linkElements[i].innerText = innerText;
        }
        continue;
      }
    };
    this.registerMarkdownPostProcessor(postProc);
    const hoverHeaderRange2 = (event, target) => {
      this.app.workspace.trigger("link-hover", target, target, target.getAttribute("linktext"), "", { scroll: parseInt(target.getAttribute("scrollline")) });
    };
    const clickHeaderRange2 = async (event, target) => {
      await this.app.workspace.openLinkText(target.getAttr("href"), "/", import_obsidian.Keymap.isModifier(event, "Mod") || event.button === 1);
    };
    document.on("mouseover", `.heading-range-link`, hoverHeaderRange2);
    document.on("click", `.heading-range-link`, clickHeaderRange2);
  }
  onunload() {
    document.off("mouseover", `.heading-range-link`, hoverHeaderRange);
    document.off("click", `.heading-range-link`, clickHeaderRange);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var LinkHeadingRangeSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for Link Heading Range" });
    new import_obsidian.Setting(containerEl).setName("Page to heading divider").setDesc("This divider will be used in preview mode in all links, between the page and the first heading").addText((text) => text.setPlaceholder("Enter a symbol").setValue(this.plugin.settings.dividerP2H).onChange(async (value) => {
      console.log("dividerP2H: " + value);
      this.plugin.settings.dividerP2H = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Heading to heading divider").setDesc("This divider will be used in preview mode in all links, between the first and the last heading").addText((text) => text.setPlaceholder("Enter a symbol").setValue(this.plugin.settings.dividerH2H).onChange(async (value) => {
      console.log("dividerH2H: " + value);
      this.plugin.settings.dividerH2H = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIEtleW1hcCwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcblxuLy8gUmVtZW1iZXIgdG8gcmVuYW1lIHRoZXNlIGNsYXNzZXMgYW5kIGludGVyZmFjZXMhXG5cbmludGVyZmFjZSBMaW5rSGVhZGluZ1JhbmdlUGx1Z2luU2V0dGluZ3Mge1xuXHRkaXZpZGVyUDJIOiBzdHJpbmc7XG5cdGRpdmlkZXJIMkg6IHN0cmluZ1xufVxuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBMaW5rSGVhZGluZ1JhbmdlUGx1Z2luU2V0dGluZ3MgPSB7XG5cdGRpdmlkZXJQMkg6ICcgPiAnLFxuXHRkaXZpZGVySDJIOiAnID4gJyxcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlua0hlYWRpbmdSYW5nZSBleHRlbmRzIFBsdWdpbiB7XG5cdHNldHRpbmdzOiBMaW5rSGVhZGluZ1JhbmdlUGx1Z2luU2V0dGluZ3M7XG5cblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cdFx0Ly8gVGhpcyBhZGRzIGEgc2V0dGluZ3MgdGFiIHNvIHRoZSB1c2VyIGNhbiBjb25maWd1cmUgdmFyaW91cyBhc3BlY3RzIG9mIHRoZSBwbHVnaW5cblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IExpbmtIZWFkaW5nUmFuZ2VTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG5cblx0XHRsZXQgcG9zdFByb2M6IE1hcmtkb3duUG9zdFByb2Nlc3NvcjtcblxuXHRcdHBvc3RQcm9jID0gKGVsOiBIVE1MRWxlbWVudCwgY3R4OiBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0KSA9PiB7XG5cblx0XHRcdGNvbnN0IGxpbmtFbGVtZW50cyA9IGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2EuaW50ZXJuYWwtbGluaycpO1xuXHRcdFx0Y29uc3Qgd2lraUxpbmtSZWdleCA9IC8oW14jXFxdfFtdKikjPyhbXiNcXF18W10qKT8jPyhbXnxcXF1bXSopPy87XG5cblx0XHRcdGZvcihsZXQgaSA9IDA7IGkgPCBsaW5rRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0Y29uc3QgbGlua0FzSFRNTCA9IChsaW5rRWxlbWVudHNbaV0gYXMgSFRNTEVsZW1lbnQpLmdldEF0dHJpYnV0ZSgnZGF0YS1ocmVmJylcblx0XHRcdFx0Y29uc3QgbWF0Y2hlcyA9IHdpa2lMaW5rUmVnZXguZXhlYyhsaW5rQXNIVE1MKVxuXG5cdFx0XHRcdGlmIChtYXRjaGVzWzJdID09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKFwiU2ltcGxlIGxpbmssIGRvaW5nIG5vdGhpbmdcIilcblx0XHRcdFx0XHRjb250aW51ZVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgcGFnZSA9IG1hdGNoZXNbMV07XG5cdFx0XHRcdGNvbnN0IGhlYWRpbmdBID0gbWF0Y2hlc1syXTtcblx0XHRcdFx0Y29uc3QgaGVhZGluZ0IgPSBtYXRjaGVzWzNdO1xuXHRcdFx0XHRjb25zdCBkaXZpZGVyUDJIID0gdGhpcy5zZXR0aW5ncy5kaXZpZGVyUDJIO1xuXHRcdFx0XHRjb25zdCBkaXZpZGVySDJIID0gdGhpcy5zZXR0aW5ncy5kaXZpZGVySDJIO1xuXHRcdFx0XHRsZXQgaW5uZXJUZXh0ID0gXCJcIjtcblx0XHRcdFx0bGV0IGhyZWYgPSBcIlwiO1xuXG5cdFx0XHRcdGxldCBzdGFuZGFyZElubmVyVGV4dCA9IFwiXCI7XG5cdFx0XHRcdHN0YW5kYXJkSW5uZXJUZXh0ID0gc3RhbmRhcmRJbm5lclRleHQuY29uY2F0KHBhZ2UsXCIgPiBcIixoZWFkaW5nQSk7XG5cblx0XHRcdFx0aWYgKGhlYWRpbmdCID09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKFwiTGluayB3aXRoIG9uZSBoZWFkaW5nLCBvbmx5IGNoYW5naW5nIGlubmVyVGV4dFwiKVxuXHRcdFx0XHRcdGlmICgobGlua0VsZW1lbnRzW2ldIGFzIEhUTUxFbGVtZW50KS5pbm5lclRleHQgPT0gc3RhbmRhcmRJbm5lclRleHQpe1xuXHRcdFx0XHRcdFx0aW5uZXJUZXh0ID0gaW5uZXJUZXh0LmNvbmNhdChwYWdlLGRpdmlkZXJQMkgsaGVhZGluZ0EpO1xuXHRcdFx0XHRcdFx0KGxpbmtFbGVtZW50c1tpXSBhcyBIVE1MRWxlbWVudCkuaW5uZXJUZXh0ID0gaW5uZXJUZXh0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb250aW51ZVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gY29uc29sZS5sb2coXCJMaW5rIHdpdGggdHdvIGhlYWRpbmdzLCBjaGFuZ2luZyBpbm5lclRleHQgYW5kIGNsYXNzTmFtZVwiKVxuXHRcdFx0XHQvLyBUT0RPIDogV2hhdCBzaG91bGQgaGFwcGVuIGlmIHVzZXIgbWlzdGFrZW5seSBpbnB1dHMgbGFzdCBoZWFkaW5nIGZpcnN0ID9cblxuXHRcdFx0XHRjb25zdCBsaW5lID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoXG5cdFx0XHRcdFx0dGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpLmZpbHRlcihcblx0XHRcdFx0XHRcdChmaWxlKSA9PiBmaWxlLmJhc2VuYW1lID09IG1hdGNoZXNbMV0pWzBdXG5cdFx0XHRcdFx0KVtcImhlYWRpbmdzXCJdLmZpbHRlcihcblx0XHRcdFx0XHRcdChoZWFkaW5nKSA9PiBoZWFkaW5nLmhlYWRpbmcgPT0gbWF0Y2hlc1syXVxuXHRcdFx0XHRcdClbMF0ucG9zaXRpb24uZW5kLmxpbmU7XG5cblx0XHRcdFx0aW5uZXJUZXh0ID0gXCJcIjtcblx0XHRcdFx0aHJlZiA9IFwiXCI7XG5cblx0XHRcdFx0KGxpbmtFbGVtZW50c1tpXSBhcyBIVE1MRWxlbWVudCkuaHJlZiA9IGhyZWYuY29uY2F0KHBhZ2UsXCIjXCIsaGVhZGluZ0EpO1xuXHRcdFx0XHQobGlua0VsZW1lbnRzW2ldIGFzIEhUTUxFbGVtZW50KS5jbGFzc05hbWUgPSAnaGVhZGluZy1yYW5nZS1saW5rJztcblx0XHRcdFx0KGxpbmtFbGVtZW50c1tpXSBhcyBIVE1MRWxlbWVudCkuc2V0QXR0cmlidXRlKFwibGlua3RleHRcIixwYWdlKTtcblx0XHRcdFx0KGxpbmtFbGVtZW50c1tpXSBhcyBIVE1MRWxlbWVudCkuc2V0QXR0cmlidXRlKFwic2Nyb2xsbGluZVwiLGxpbmUpO1xuXG5cdFx0XHRcdHN0YW5kYXJkSW5uZXJUZXh0ID0gXCJcIjtcblx0XHRcdFx0c3RhbmRhcmRJbm5lclRleHQgPSBzdGFuZGFyZElubmVyVGV4dC5jb25jYXQocGFnZSxcIiA+IFwiLGhlYWRpbmdBLFwiID4gXCIsaGVhZGluZ0IpO1xuXG5cdFx0XHRcdGlmICgobGlua0VsZW1lbnRzW2ldIGFzIEhUTUxFbGVtZW50KS5pbm5lclRleHQgPT0gc3RhbmRhcmRJbm5lclRleHQpIHtcblx0XHRcdFx0XHRpbm5lclRleHQgPSBpbm5lclRleHQuY29uY2F0KHBhZ2UsZGl2aWRlclAySCxoZWFkaW5nQSxkaXZpZGVySDJILGhlYWRpbmdCKTtcblx0XHRcdFx0XHQobGlua0VsZW1lbnRzW2ldIGFzIEhUTUxFbGVtZW50KS5pbm5lclRleHQgPSBpbm5lclRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUT0RPIDogQ2FuIHdlIGNhY2hlIHRoZXNlIGVsZW1lbnRzID9cblxuXHRcdFx0XHRjb250aW51ZVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMucmVnaXN0ZXJNYXJrZG93blBvc3RQcm9jZXNzb3IocG9zdFByb2MpO1xuXG5cdFx0Y29uc3QgaG92ZXJIZWFkZXJSYW5nZSA9IChldmVudDogTW91c2VFdmVudCwgdGFyZ2V0OiBIVE1MRWxlbWVudCkgPT4ge1xuXHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLnRyaWdnZXIoXCJsaW5rLWhvdmVyXCIsdGFyZ2V0LHRhcmdldCwgdGFyZ2V0LmdldEF0dHJpYnV0ZShcImxpbmt0ZXh0XCIpLCBcIlwiLHtzY3JvbGw6cGFyc2VJbnQodGFyZ2V0LmdldEF0dHJpYnV0ZShcInNjcm9sbGxpbmVcIikpfSlcblx0XHRcdC8vIEFwcGFyZW50bHkgbm90aGluZyBlbHNlIGZyb20gZVN0YXRlIHRoYW4gXCJzY3JvbGxcIiB3aWxsIGJlIHVzZWQgYnkgdGhlIGhvdmVyIHByZXZpZXcgaW50ZXJuYWxzIChzZWUgRGlzY29yZCBtZXNzYWdlKVxuXHRcdFx0Ly8gVE9ETyA6IENhbiBJIGZpbmQgYSB3YXkgdG8gcmVtb3ZlIHRoZSB5ZWxsb3cgaGlnaGxpZ2h0ID9cblx0XHRcdC8vIFRPRE8gOiBDYW4gSSBmaW5kIGEgd2F5IHRvIHNjcm9sbCB0byBmaXJzdCBoZWFkaW5nIHdoZW4gY2xpY2tpbmcgb24gdGhlIGxpbmsgdG9vbHRpcCA/XG5cdFx0XHQvLyBUT0RPIDogQ2FuIEkgZmluZCBhIHdheSB0byBkaXNwbGF5IG9ubHkgdGhlIHJhbmdlIGluIHRoZSBwb3BvdmVyIGluc3RlYWQgb2YgZGlzcGxheWluZyB0aGUgd2hvbGUgbm90ZSBhbmQgc2Nyb2xsIHRvIHRoZSBmaXJzdCBoZWFkaW5nID9cblx0XHR9XG5cblx0XHRjb25zdCBjbGlja0hlYWRlclJhbmdlID0gYXN5bmMgKGV2ZW50OiBNb3VzZUV2ZW50LCB0YXJnZXQ6IEhUTUxFbGVtZW50KSA9PiB7XG5cdFx0XHRhd2FpdCB0aGlzLmFwcC53b3Jrc3BhY2Uub3BlbkxpbmtUZXh0KHRhcmdldC5nZXRBdHRyKFwiaHJlZlwiKSwgXCIvXCIsS2V5bWFwLmlzTW9kaWZpZXIoZXZlbnQsICdNb2QnKSB8fCAxID09PSBldmVudC5idXR0b24pXG5cdFx0XHQvLyBUT0RPIDogc2Nyb2xsIGFuZCBoaWdobGlnaHQgaW4geWVsbG93IHRoZSBoZWFkaW5nIHJhbmdlXG5cdFx0XHQvLyBUcmllZCB0byBwYXNzIGFuIGVwaGVtZXJhbCBzdGF0ZSwgYnV0IHdpdGhvdXQgc3VjY2Vzcy4uLlxuXHRcdH1cblxuXHRcdGRvY3VtZW50Lm9uKCdtb3VzZW92ZXInLCBgLmhlYWRpbmctcmFuZ2UtbGlua2AsIGhvdmVySGVhZGVyUmFuZ2UpO1xuXHRcdGRvY3VtZW50Lm9uKCdjbGljaycsIGAuaGVhZGluZy1yYW5nZS1saW5rYCwgY2xpY2tIZWFkZXJSYW5nZSk7XG5cblx0fVxuXG5cdG9udW5sb2FkKCkge1xuXG5cdFx0ZG9jdW1lbnQub2ZmKCdtb3VzZW92ZXInLCBgLmhlYWRpbmctcmFuZ2UtbGlua2AsIGhvdmVySGVhZGVyUmFuZ2UpO1xuXHRcdGRvY3VtZW50Lm9mZignY2xpY2snLCBgLmhlYWRpbmctcmFuZ2UtbGlua2AsIGNsaWNrSGVhZGVyUmFuZ2UpO1xuXG5cdFx0Ly8gVE9ETyA6IE9wdGlvbiB0byBsb29wIHRocm91Z2ggYWxsIGZpbGVzLCBcblx0XHQvLyBhbmQgcmVwbGFjZSBbW1BhZ2UjSGVhZGVyQSNIZWFkZXJCXV0gYnkgW1tQYWdlI0hlYWRlckFdXS1IZWFkZXJCID9cblx0XHQvLyBUaGF0IHdvdWxkIHByZXZlbnQgdGhlIHBsdWdpbiBmcm9tIFwiYmVha2luZ1wiIG5vdGVzXG5cblx0fVxuXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcblx0fVxuXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuXHR9XG59XG5cbmNsYXNzIExpbmtIZWFkaW5nUmFuZ2VTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG5cdHBsdWdpbjogTGlua0hlYWRpbmdSYW5nZTtcblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBMaW5rSGVhZGluZ1JhbmdlKSB7XG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xuXHR9XG5cblx0ZGlzcGxheSgpOiB2b2lkIHtcblx0XHRjb25zdCB7Y29udGFpbmVyRWx9ID0gdGhpcztcblxuXHRcdGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7dGV4dDogJ1NldHRpbmdzIGZvciBMaW5rIEhlYWRpbmcgUmFuZ2UnfSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdQYWdlIHRvIGhlYWRpbmcgZGl2aWRlcicpXG5cdFx0XHQuc2V0RGVzYygnVGhpcyBkaXZpZGVyIHdpbGwgYmUgdXNlZCBpbiBwcmV2aWV3IG1vZGUgaW4gYWxsIGxpbmtzLCBiZXR3ZWVuIHRoZSBwYWdlIGFuZCB0aGUgZmlyc3QgaGVhZGluZycpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdFbnRlciBhIHN5bWJvbCcpXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kaXZpZGVyUDJIKVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ2RpdmlkZXJQMkg6ICcgKyB2YWx1ZSk7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZGl2aWRlclAySCA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdIZWFkaW5nIHRvIGhlYWRpbmcgZGl2aWRlcicpXG5cdFx0XHQuc2V0RGVzYygnVGhpcyBkaXZpZGVyIHdpbGwgYmUgdXNlZCBpbiBwcmV2aWV3IG1vZGUgaW4gYWxsIGxpbmtzLCBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgdGhlIGxhc3QgaGVhZGluZycpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdFbnRlciBhIHN5bWJvbCcpXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kaXZpZGVySDJIKVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ2RpdmlkZXJIMkg6ICcgKyB2YWx1ZSk7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZGl2aWRlckgySCA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KSk7XG5cdH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBK0Q7QUFTL0QsSUFBTSxtQkFBbUQ7QUFBQSxFQUN4RCxZQUFZO0FBQUEsRUFDWixZQUFZO0FBQ2I7QUFFQSxJQUFxQixtQkFBckIsY0FBOEMsdUJBQU87QUFBQSxFQUdwRCxNQUFNLFNBQVM7QUFDZCxVQUFNLEtBQUssYUFBYTtBQUV4QixTQUFLLGNBQWMsSUFBSSwyQkFBMkIsS0FBSyxLQUFLLElBQUksQ0FBQztBQUVqRSxRQUFJO0FBRUosZUFBVyxDQUFDLElBQWlCLFFBQXNDO0FBRWxFLFlBQU0sZUFBZSxHQUFHLGlCQUFpQixpQkFBaUI7QUFDMUQsWUFBTSxnQkFBZ0I7QUFFdEIsZUFBUSxJQUFJLEdBQUcsSUFBSSxhQUFhLFFBQVEsS0FBSztBQUM1QyxjQUFNLGFBQWMsYUFBYSxHQUFtQixhQUFhLFdBQVc7QUFDNUUsY0FBTSxVQUFVLGNBQWMsS0FBSyxVQUFVO0FBRTdDLFlBQUksUUFBUSxNQUFNLFFBQVc7QUFFNUI7QUFBQSxRQUNEO0FBRUEsY0FBTSxPQUFPLFFBQVE7QUFDckIsY0FBTSxXQUFXLFFBQVE7QUFDekIsY0FBTSxXQUFXLFFBQVE7QUFDekIsY0FBTSxhQUFhLEtBQUssU0FBUztBQUNqQyxjQUFNLGFBQWEsS0FBSyxTQUFTO0FBQ2pDLFlBQUksWUFBWTtB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
